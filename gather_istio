#!/bin/bash

# Copyright 2019 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MUST_GATHER=${MUST_GATHER:-/usr/bin/openshift-must-gather}

# Auxiliary function that adds a k8s prefix to a resource
# $1: The prefix - e.g. "ns" or "pod"
# $2...$N: Resources
# Returns: The list of resources with the prefix prepended on them
#
# Example: addResourcePrefix pod a b c  => Returns: pod/a pod/b pod/c
function addResourcePrefix() {
  local result=""
  local prefix="${1}"
  shift

  for ns in $*; do
    result+=" ${prefix}/${ns} "
  done

  echo "${result}"
}

# Get the namespaces of all control planes in the cluster
function getControlPlanes() {
  local result=()

  local namespaces=$(oc get ServiceMeshControlPlane --all-namespaces -o jsonpath='{.items[*].metadata.namespace}')
  for namespace in ${namespaces}; do
    result+=" ${namespace} "
  done

  echo "${result}"
}

# Get the members of a mesh (namespaces that belongs to a certain control plane).
# $1 = Namespace of the control plane - e.g. "istio-system"
function getMembers() {
  local cp="${1}"

  local output="$(oc -n "${cp}" get ServiceMeshMemberRoll default -o jsonpath='{..members}' 2>/dev/null)"
  if [ -z "${output}" ]; then
    return
  fi

  output="$(echo ${output} | tr '[]' '  ')"
  echo ${output}
}

# Get the CRD's that belong to Maistra
function getCRDs() {
  local result=""
  local output=$(oc get crd -lmaistra-version -o jsonpath='{.items[*].metadata.name}')
  for crd in ${output}; do
    result+=" ${crd} "
  done

  echo ${result}
}

function main() {
  echo
  echo "Executing Istio gather script"
  echo

  operatorNamespace=$(oc get pods --all-namespaces -l name=istio-operator -o jsonpath="{.items[0].metadata.namespace}")
  local resources="ns/${operatorNamespace} MutatingWebhookConfiguration ValidatingWebhookConfiguration"


  local controlPlanes="$(getControlPlanes)"
  resources+="$(addResourcePrefix ns ${controlPlanes})"

  for cp in ${controlPlanes}; do
    resources+="$(addResourcePrefix ns $(getMembers ${cp}))"
  done

  local crds="$(getCRDs)"
  resources+="$(addResourcePrefix crd ${crds})"

  for resource in ${resources}; do
    echo
    echo "Dumping resource ${resource}..."
    ${MUST_GATHER} inspect ${resource}
  done

  # Get all CRD's
  for crd in ${crds}; do
    echo
    echo "Dumping CRD ${crd}..."
    ${MUST_GATHER} inspect --all-namespaces ${crd}
  done

  echo
  echo
  echo "Done"
  echo
}

main